{"version":3,"sources":["hooks/projectData.js","config.js","pages/common/ProjectGraph/Axes.js","pages/common/ProjectGraph/DayGraph.js","hooks/graphScales.js","pages/common/ProjectGraph/index.js","pages/Home/index.js","hooks/window.js","App.js","serviceWorker.js","index.js"],"names":["useProjectData","thing","_useState","useState","_useState2","Object","slicedToArray","projectData","setProjectData","useEffect","fetch","method","headers","Content-Type","mode","then","res","json","projectItems","allProjects","data","reduce","accumulator","project","fromDate","parse","format","Date","from","undefined","push","keys","map","key","date","sort","a","b","XAxis","props","scale","transform","gridline","className","domain","to","width","range","dates","Array","differenceInHours","fill","x","i","addHours","concat","react_default","createElement","lib","x1","y1","x2","y2","stroke","strokeWidth","d","react","y","textAnchor","length","YAxis","projects","alignmentBaseline","DayGraph","projectScale","xScale","scaleTime","setScale","useTimeScale","yScale","values","_useState5","scaleBand","round","padding","useBandScale","bandWidth","bandwidth","keyedData","objectSpread","translate","Axes_XAxis","Axes_YAxis","layout_lib","nodeEnter","animate","nodes","_ref","projectName","height","ProjectGraph","_useState3","scaleOrdinal","useOrdinalScale","schemeCategory10","margin","ProjectGraph_DayGraph","Home","window","innerWidth","setWidth","addEventListener","debounce","useWindowWidth","pages_common_ProjectGraph","App","pages_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c4f47f5.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { format, parse } from 'date-fns'\nimport { projectDataEndpoint } from '../config'\n\nconst useProjectData = (thing) => {\n  const [projectData, setProjectData] = useState(null);\n\n  useEffect(() => {\n    fetch(\n      projectDataEndpoint + thing,\n      {\n        method: 'GET',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        mode: 'cors'\n      }\n    )\n      .then(res => res.json())\n      .then(res => {\n        const { projectItems, allProjects } = res;\n\n        const data = projectItems.reduce((accumulator, project) => {\n          const fromDate = parse(format(new Date(project.from), 'YYYY-MM-DD') + 'T00:00:00');\n\n          if (accumulator[fromDate] === undefined) accumulator[fromDate] = [];\n          accumulator[fromDate].push(project);\n          return accumulator;\n        }, {});\n\n        const projectData = Object.keys(data).map(key => ({ date: key, data: data[key] }));\n        projectData.sort((a,b) => a.date <= b.date ? a.date < b.date ? -1 : 0 : -1);\n\n        setProjectData({\n          thing,\n          projectData,\n          allProjects\n        });\n      });\n  }, []);\n\n  return projectData\n}\n\nexport default useProjectData;\n","const projectDataEndpoint = 'https://uqx0e6l8i0.execute-api.eu-central-1.amazonaws.com/dev/thing/'\n\nexport {\n  projectDataEndpoint\n}\n\n","import React, { Fragment } from 'react';\nimport { Group, Line, Text } from '@potion/element'\nimport { differenceInHours, addHours, format } from 'date-fns'\n\nconst XAxis = (props) => {\n  const { scale, transform, gridline, className } = props;\n\n  const from = scale.domain()[0];\n  const to = scale.domain()[1];\n  const width = scale.range()[1];\n\n  const dates = new Array(differenceInHours(to, from)).fill(0).map((x, i) => addHours(from, i)).concat(to);\n\n  return (\n    <Group transform={transform} className={className}>\n      <Line x1={0} y1={0} x2={width} y2={0} stroke='black' strokeWidth={1} className=\"axis\"/>\n      {dates.map((d, i) => {\n        const x = scale(d);\n        return (\n        <Fragment key={i}>\n          <Line\n            x1={x} x2={x}\n            y1={0} y2={5}\n            className=\"tick\"\n          />\n          <Text\n            className=\"tick-label\"\n            x={x}\n            y={13}\n            textAnchor={i > 0 ? i < dates.length-1 ? 'middle' : 'end' : 'start' }\n          >\n            {format(d, 'HH:mm')}\n          </Text>\n          {gridline === undefined\n            ? null\n            : (<Line x1={x} x2={x} y1={-gridline} y2={0} className=\"gridline\"/>)}\n        </Fragment>\n        );\n      })}\n    </Group>\n  )\n}\n\nconst YAxis = (props) => {\n  const { scale, transform, gridline, className } = props;\n\n  const projects = scale.domain();\n  const range = scale.range();\n\n  return (\n    <Group transform={transform} className={className}>\n      <Line x1={0} x2={0} y1={range[0]} y2={range[1]} stroke=\"black\" strokeWidth={1} />\n      {projects.map((project, i) => {\n        const y = scale(project);\n        return (\n          <Fragment key={i}>\n            <Line\n              x1={0}\n              x2={-5}\n              y1={y}\n              y2={y}\n              stroke='black'\n              strokeWidth={1}\n              className=\"tick\"\n            />\n            <Text\n              className=\"tick-label\"\n              x={-7}\n              y={y}\n              textAnchor='end'\n              alignmentBaseline='central'\n            >\n              {project}\n            </Text>\n            {\n              gridline === undefined\n                ? null\n                : (<Line x1={0} x2={gridline} y1={y} y2={y} className=\"gridline\"/>)\n            }\n          </Fragment>\n        )\n      })}\n    </Group>\n  );\n}\n\nexport {\n  XAxis,\n  YAxis,\n}\n","import React from 'react'\nimport { Collection } from '@potion/layout'\nimport { Group, Text, Rect } from '@potion/element'\nimport { addHours, format } from 'date-fns'\n\nimport { XAxis, YAxis } from './Axes'\n\nimport './index.css'\n\nimport { useTimeScale, useBandScale } from '../../../hooks/graphScales'\n\nconst DayGraph = (props) => {\n  const {\n    x,\n    y,\n    width,\n    date,\n    data,\n    projectScale\n  } = props;\n\n  const from = addHours(date, 7),\n        to = addHours(date, 18);\n\n  const xScale = useTimeScale({ width, from, to });\n  const yScale = useBandScale({ values: projectScale.domain(), range: [0, 100]})\n  const bandWidth = yScale.bandwidth();\n\n  const keyedData = data.map((d,i) => ({key: '' + i, ...d}));\n\n  return (\n    <Group transform={{translate: [x, y]}}>\n      <Text y={-2} x={5}>{format(date, 'ddd\\tDD\\tMMM')}</Text>\n      <XAxis\n        scale={xScale}\n        transform={{translate: [0, 100]}}\n        gridline={100}\n        className=\"x-axis\"\n      />\n      <YAxis\n        scale={yScale}\n        gridline={width}\n        className=\"y-axis\"\n      />\n      <Collection\n        data={keyedData}\n        nodeEnter={d => ({ ...d, to: d.from })}\n        animate\n      >\n        {nodes => nodes.map(({key, from, to, projectName}) => {\n          const x = xScale(new Date(from));\n          const width = xScale(new Date(to)) - x;\n          const y = yScale(projectName);\n          return <Rect key={key} x={x} y={y-bandWidth/2} width={width} height={bandWidth} fill={projectScale(projectName)}/>\n        })}\n      </Collection>\n    </Group>\n  );\n}\n\nexport default DayGraph;\n","import { useState, useEffect } from 'react';\nimport { scaleTime, scaleOrdinal, scaleBand } from 'd3-scale';\n\nconst useTimeScale = (props) => {\n  const { from, to, width } = props;\n  const [scale, setScale] = useState({ scale: scaleTime().domain([from, to]) });\n\n  useEffect(() => {\n    setScale({\n      scale: scale.scale\n        .range([0, width])\n    })\n  }, [width]);\n\n  return scale.scale;\n}\n\nconst useOrdinalScale = (props) => {\n  const { values, range } = props;\n  const [scale] = useState({\n    scale: scaleOrdinal()\n      .domain(values)\n      .range(range)\n  });\n  \n  return scale.scale;\n}\n\nconst useBandScale = (props) => {\n  const { values, range } = props;\n  const [scale] = useState({\n    scale: scaleBand()\n      .domain(values)\n      .range(range)\n      .round(true)\n      .padding(0.3)\n  });\n\n  return scale.scale;\n}\n\nexport {\n  useTimeScale,\n  useOrdinalScale,\n  useBandScale,\n}\n","import React from 'react';\nimport { Svg } from '@potion/element'\nimport { schemeCategory10 } from 'd3-scale-chromatic';\n\nimport DayGraph from './DayGraph'\nimport { useOrdinalScale } from '../../../hooks/graphScales'\n\nconst ProjectGraph = (props) => {\n  const { data, width } = props;\n  const { allProjects, projectData } = data;\n\n  const projectScale = useOrdinalScale({values: allProjects, range: schemeCategory10 });\n\n  const margin = { top: 30, bottom: 0, left: 130, right: 30 }\n\n  const height = margin.top + margin.bottom + projectData.length*160;\n\n  return (\n    <Svg height={height} width={width}>\n      {projectData.length > 0 ? projectData.map((d, i) =>\n        <DayGraph\n          x={margin.left}\n          y={i*160 + margin.top}\n          width ={width - margin.left - margin.right}\n          key={d.date}\n          date={d.date}\n          data={d.data} \n          projectScale={projectScale}\n        />\n      ) : null}\n    </Svg>\n  )\n}\n\nexport default ProjectGraph;\n","import React from 'react';\nimport useProjectData from '../../hooks/projectData'\nimport ProjectGraph from '../common/ProjectGraph'\nimport { useWindowWidth } from '../../hooks/window'\n\nconst Home = (props) => {\n  const projectData = useProjectData('tasker');  \n\n  const width = useWindowWidth();\n\n  return (\n    <div>\n      <section>\n        {projectData !== null\n          ?  <ProjectGraph data={projectData} width={width} />\n          : null\n        }\n      </section>\n    </div>\n  )\n}\n\nexport default Home;\n\n","import { useState, useEffect } from 'react';\nimport debounce from 'debounce'\n\nconst useWindowWidth = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    window.addEventListener('resize', debounce(() => {\n      setWidth(window.innerWidth);\n    }, 500));\n  }, [])\n\n  return width;\n}\n\nexport { useWindowWidth };\n","import React from 'react';\nimport Home from './pages/Home'\n\nconst App = (props) => {\n  return(\n    <div className=\"App\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}